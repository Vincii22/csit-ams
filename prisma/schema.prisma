// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN   @map("Admin")
  STUDENT @map("Student")
  OFFICER @map("Officer")
}

enum FinanceStatus {
  PENDING
  PAID
  WAIVED
}

enum EventType {
  GA        @map("General Assembly")
  HACKATHON @map("Hackathon")
  CUSTOM    @map("Custom")
}

enum AttendanceStatus {
  ABSENT
  ATTENDED
  EXCUSED
}

enum ClearanceStatus {
  PENDING
  CLEARED
  REJECTED
}

enum Semester {
  FIRST_SEMESTER @map("First Semester")
  SECOND_SEMESTER @map("Second Semester")
}

model User {
  id         String   @id
  name       String
  email      String   @unique
  role       Role     @default(STUDENT)
  verifiedAt DateTime

  student   Student?
  Clearance Clearance[]
  Log       Log[]

  @@map("user")
}

model Student {
  id         String  @id
  schoolId   String
  courseId   String?
  positionId String?
  year       Int?

  course   Course?   @relation(fields: [courseId], references: [id])
  position Position? @relation(fields: [positionId], references: [id])
  user     User      @relation(fields: [id], references: [id], onDelete: Cascade)

  StudentAcademicYear StudentAcademicYear[]
  Finance             Finance[]
  Clearance           Clearance[]
  Attendance          Attendance[]
  Sanction            Sanction[]

  @@map("student")
}

model Course {
  id           String @id @default(uuid())
  label        String
  abbreviation String @unique

  students Student[]

  @@map("course")
}

model Position {
  id           String  @id @default(uuid())
  title        String  @unique
  abbreviation String?

  students Student[]

  @@map("position")
}

model AcademicYear {
  id        String    @id @default(uuid())
  label     String
  startDate DateTime
  endDate   DateTime?

  AcademicYearSemester AcademicYearSemester[]

  @@unique([label])
  @@map("academic_year")
}

model AcademicYearSemester {
  id String @id @default(uuid())
  academicYearId String
  semester Semester

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  fees                Fee[]
  events              Event[]
  clearances          Clearance[]
  sanctions           Sanction[]
  studentAcademicYear StudentAcademicYear[]

  @@map("academic_year_semester")
}

model StudentAcademicYear {
  studentId      String
  academicYearSemesterId String

  student              Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  academicYearSemester AcademicYearSemester @relation(fields: [academicYearSemesterId], references: [id], onDelete: Cascade)

  @@unique([studentId, academicYearSemesterId])
  @@map("student_academic_year_semester")
}

model Fee {
  id          String    @id @default(uuid())
  academicYearSemesterId String
  description String
  amount      Decimal
  isArchived  Boolean?
  archivedAt  DateTime?
  createdAt   DateTime  @default(now())

  academicYearSemester AcademicYearSemester @relation(fields: [academicYearSemesterId], references: [id], onDelete: Cascade)

  finances Finance[]

  @@map("fee")
}

model Finance {
  id         String        @id @default(uuid())
  studentId  String
  feeId      String
  status     FinanceStatus @default(PENDING)
  note       String
  isArchived Boolean?
  archivedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fee     Fee     @relation(fields: [feeId], references: [id], onDelete: Cascade)

  @@unique([studentId, feeId])
  @@index([studentId])
  @@map("finance")
}

model Event {
  id          String    @id @default(uuid())
  academicYearSemesterId String
  type        EventType
  description String
  startTime   DateTime
  endTime     DateTime
  location    String
  required    Boolean   @default(true)
  isArchived  Boolean?
  archivedAt  DateTime?
  createdAt   DateTime  @default(now())

  academicYearSemester AcademicYearSemester @relation(fields: [academicYearSemesterId], references: [id], onDelete: Cascade)

  attendances Attendance[]

  @@map("event")
}

model Attendance {
  id         String           @id @default(uuid())
  studentId  String
  eventId    String
  timeIn     DateTime
  timeout    DateTime?
  status     AttendanceStatus
  note       String?
  isArchived Boolean?
  archivedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  Sanction Sanction[]

  @@map("attendance")
}

model Sanction {
  id             String    @id @default(uuid())
  studentId      String
  attendanceId   String
  academicYearSemesterId String
  requiredAction String
  note           String?
  isArchived     Boolean?
  archivedAt     DateTime?
  createdAt      DateTime  @default(now())

  student              Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attendance           Attendance           @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  academicYearSemester AcademicYearSemester @relation(fields: [academicYearSemesterId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@map("sanction")
}

model Clearance {
  id           String          @id @default(uuid())
  studentId    String
  academicYearSemesterId String
  reviewedById String?
  status       ClearanceStatus
  isArchived   Boolean?
  archivedAt   DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  student              Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reviewedBy           User?                @relation(fields: [reviewedById], references: [id], onDelete: SetNull)
  academicYearSemester AcademicYearSemester @relation(fields: [academicYearSemesterId], references: [id])

  @@index([studentId])
  @@map("clearance")
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("log")
}
